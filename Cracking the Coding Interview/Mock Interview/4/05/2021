Temuulen
=================

HH:MM:SS

"121212"
"052345"
"000000"
"001100"
"230032"

00:00:00
23:59:59

23*59*59
Write a program to generate all the palindromes in HH:MM:SS format
function takes a string and checks if its palindrome or not

# O(n) -> 0 1000
# o(1) -> 0 1000
# return string == string[::-1]
# 6 -> 6 cpu jobs
# Amortized Constant Time


def generatePalindromes():
	def checksPalindrome(finalString):
  	if finalString == finalString[::-1]: 
    	res.append(finalString)
  # lambda two_chars 
  res = []
  for hour in range(24): # 0 --> 23
  	for minute in range(60): # 0 --> 59
    	for second in range(60): # 0 --> 59
        
      	if hour <= 9: strHour = "0"+str(hour) # 00
        if minute <= 9: strMinute = "0"+str(minute) # 01
        if second <= 9: strSecond = "0"+str(second) # 01
      	finalString = strHour+":"+strMinute+":"+"strSecond

        checksPalindrome(finalString)
  return res
  
Amortized
===========
Time Complexity(1)
Space Complexity(1)

Non-Amortized
===========
Time Complexity(n)
Space Complexity(n)

1. Understanding of the problem
		- Ask more question
2. Coming up with an algorithm
		- Pretty good
3. Solving the problem (Coding)
		- Good
4. Code Quality
		- Make stuff modular
5. Verification of Solution
		- Know the difference between amortized and non-amortized
    - Know that what we are supposed to present is 
    		worst case amortized asymptotic time complexity
6. Presentation (Tallking through the solution)
		- Presentation

  iterate i from 0 --> 23
   # 0
  	iterate j from 0 --> 60:
    # 0
    	iterate z from 0 --> 60:
      # 60 seconds
      	#if conditions: 0000001
        #								001
      	string = i + j + z
    		checksPalindrome()

Swopnil 
=================
One Away: There are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character.
Given two strings, write a function to check if they are one edit (or zero edits) away.

Example
pale, ple -> True
pales, pale -> True
pale, bale -> True
pale, bake -> False

# Examples 

abc -> a (False)
abc -> ab (1)
abc -> abb (2)
abc -> abb (True)


# Algorithm

Counter() 
Hashmap of the counts of the values of both the final and initial strings
	- Total difference
  - abs of all the of keys and their counts
If total differnce > 2 False
	True
  
Time O(n)
Space O(n)
  
# Coding

from collections import Counter

def one_edit_away(initial:str, final:str) -> bool:
	total_diff = 0
  ini_count = Counter(initial)
  fin_count = Counter(final)
  for k in fin_count.keys():
  	diff = fin_count[k] - ini_count.get(k,0)
  	if diff: total_diff += abs(diff)
  if total_diff > 2: return False
  return True
  
# Verify
bc -> a (False) [b:1, c:1], [a:1]
abc -> ab (1)
abc -> abb (2)
abc -> abb (True)
"" -> a

1. Understanding of the problem
2. Coming up with an algorithm
3. Solving the problem (Coding)
4. Code Quality
5. Verification of Solution
6. Presentation (Tallking through the solution)




